import numpy as np
def polarization_angle_plus(psi, incl, PhiL, alphaHatPlus, thetaPlus=0, beta=0):
    return np.arccos((((np.cos(psi) * (1/((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))) * (((np.cos(incl)**2) * ((-((np.cos(PhiL)**2) * (-1 + np.cos((alphaHatPlus + beta + (-thetaPlus)))))) + np.cos((alphaHatPlus + beta + (-thetaPlus))))) + (np.cos((alphaHatPlus + beta + (-thetaPlus))) * (np.sin(incl)**2) * (np.sin(PhiL)**2)))) + (-8 * np.cos(incl) * (1/(6 + (2 * np.cos((2 * incl))) + np.cos(((2 * incl) + (-2 * PhiL))) + (-2 * np.cos((2 * PhiL))) + np.cos((2 * (incl + PhiL))))) * np.sin((2 * PhiL)) * np.sin(psi) * (np.sin(((1/2) * (alphaHatPlus + beta + (-thetaPlus))))**2))) * ((np.cos((alphaHatPlus + beta + (-thetaPlus))) * np.sin(incl)) + ((np.cos(incl)**2) * np.cos(PhiL) * (((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))**(-1/2)) * np.sin((alphaHatPlus + beta + (-thetaPlus))))) * ((((np.sin(PhiL)**2) * (1/((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))) * (np.sin((alphaHatPlus + beta + (-thetaPlus)))**2)) + (((np.cos((alphaHatPlus + beta + (-thetaPlus))) * np.sin(incl)) + ((np.cos(incl)**2) * np.cos(PhiL) * (((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))**(-1/2)) * np.sin((alphaHatPlus + beta + (-thetaPlus)))))**2))**(-1/2))) + (-(np.sin(PhiL) * np.sin((alphaHatPlus + beta + (-thetaPlus))) * ((((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2))) * (((np.sin(PhiL)**2) * (1/((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))) * (np.sin((alphaHatPlus + beta + (-thetaPlus)))**2)) + (((np.cos((alphaHatPlus + beta + (-thetaPlus))) * np.sin(incl)) + ((np.cos(incl)**2) * np.cos(PhiL) * (((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))**(-1/2)) * np.sin((alphaHatPlus + beta + (-thetaPlus)))))**2)))**(-1/2)) * ((-(np.cos(incl) * np.sin(incl) * (((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))**(-3/2)) * np.sin(psi) * ((-2 * np.sin(incl) * (np.sin(PhiL)**2) * (((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))**(1/2)) * (np.sin(((1/2) * (alphaHatPlus + beta + (-thetaPlus))))**2)) + ((np.cos(incl)**2) * np.cos(PhiL) * np.sin((alphaHatPlus + beta + (-thetaPlus)))) + (np.cos(PhiL) * (np.sin(incl)**2) * (np.sin(PhiL)**2) * np.sin((alphaHatPlus + beta + (-thetaPlus))))))) + (-(np.cos(psi) * (((-1 + np.cos((alphaHatPlus + beta + (-thetaPlus)))) * ((1/np.tan(PhiL))**3)) + (2 * (1/np.tan(PhiL)) * ((1/np.sin(PhiL))**2) * (np.sin(((1/2) * (alphaHatPlus + beta + (-thetaPlus))))**2)) + ((1/np.sin(PhiL)) * (1/np.cos(incl)) * (((np.cos(incl)**2) + ((np.sin(incl)**2) * (np.sin(PhiL)**2)))**(1/2)) * np.sin((alphaHatPlus + beta + (-thetaPlus))) * np.tan(incl))) * (1/(((1/np.sin(PhiL))**2) + (np.tan(incl)**2))))) + (np.cos(incl) * np.sin(psi) * (1/(((1/np.sin(PhiL))**2) + (np.tan(incl)**2))) * (((-1 + np.cos((alphaHatPlus + beta + (-thetaPlus)))) * ((1/np.tan(PhiL))**2)) + ((1/np.sin(PhiL))**2) + (np.cos((alphaHatPlus + beta + (-thetaPlus))) * (np.tan(incl)**2))))))))